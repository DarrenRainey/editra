This file outlines a set of guidelines to follow while working
on this project, mostly style and codeing practices.

It also includes some how to information about using cvs and other tools

#-------------------------------------------------------------------------------#
    These are the convientions used by this project. Keeping code neat and readable
    is an absolute requirement.

    CODE Style Guidelines:
	- Try to keep your lines less that 80 columns wide to improve
	  readablilty.

	- When creating new files copy an existing template from the templates
	  directory to get started with if possible.

	- If you have to repeat some segment of code more than 2 or 3 times 
	  write a function to perform that action. If its used by you in that
	  many places it will probably be usefull elsewhere as well.

	- Variables/Locals begin with undercase letters

	- Constants/Globals should be all UPPERCASE w/o underscores

	- Variable names should be descriptive as possbile and should never
	  be a single letter.

		EXCEPTION: iterators used in loops, i,j,k,ect

	- Indentation should use spaces not tabs. Each level of code should
	  be indented by four (4) spaces. Most editors have the option of
	  changing the tab key to use spaces instead of tab characters.
	
	- Separate main sections of code in files such as between class definitions
              with a line like the one above this section of this file (#-----...------#)

	- Separate smaller sections within functions/classes by typeing a hash
	  mark '#' followed by four dashes '----' then a space and then the one
	  line description of the section, a space and a closing '----#'.

		EXAMPLE:	#---- Variables ----#

	- Functions in all modules except for dev_tool must be named
	  with a mix up upper and lower case letters (camelcase). This is a wx
	  convention and since most of this is written using wx we will
	  follow that convention, even though functions are typically written
	  begining with a lower case letter, with each following word using
	  uppercase letters in the begining.
	
		EXAMPLE:	def DoSomething(parm1, parm2):

	- Functions in the dev_tool module are used mostly for
	  debugging and other developmental tasks. For this modules
	  Functions must be named in all UPPERCASE.

		EXAMPLE:	def PRINTERROR(parm1):


#-------------------------------------------------------------------------------#

    DOCUMENTATION:

	- All files should have a long description and run down of classes
	  and functions contained in the class at the top of the file directly
	  below the license statement.

	- All functions/classes must have docstrings and they must be
	  in the following format.

		defun MyNewFunction():
		""" DOCSTRING about function """

		defun MyOtherFunction():
		""" DOCSTRING that takes up multiple
		lines should look like this

		"""

	- Use comments that are on the same line as what they are commenting
	  sparingly. It is usually better to put it on the line above.

		EXAMPLE: some_var = (x * (other_var + CONST_VAR))	# comment

	- Mark problem areas / Bugs in files on a comment line begining with one 
	  of the following keywords TODO, HACK, XXX, BUG. 


#-------------------------------------------------------------------------------#

PyLint:
	Is a tool for checking code for consistency and 'good' form. So install it and use it
           a pylint config file for the project is included in the toplevel src directory.

        Usage:
	    pylint file_name

#-------------------------------------------------------------------------------#

DEVELOPMENT TOOLS:

	- Required Software
		Python 2.4 or Higher: http://www.python.org
		wxPython 2.8: http://www.wxpython.org

            - Suggested Tools
		PyLint http://www.logilab.org/projects/pylint

